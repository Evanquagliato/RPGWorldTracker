// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPGWorldTracker.Data;

namespace RPGWorldTracker.Migrations
{
    [DbContext(typeof(RPGWorldTrackerContext))]
    [Migration("20211101001359_onmac")]
    partial class onmac
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KingdomKingdom", b =>
                {
                    b.Property<int>("AlliesKingdomId")
                        .HasColumnType("int");

                    b.Property<int>("EnemiesKingdomId")
                        .HasColumnType("int");

                    b.HasKey("AlliesKingdomId", "EnemiesKingdomId");

                    b.HasIndex("EnemiesKingdomId");

                    b.ToTable("KingdomKingdom");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampaignId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Appearance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeId")
                        .HasColumnType("int");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("HomeId");

                    b.HasIndex("JobId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Home", b =>
                {
                    b.Property<int>("HomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("ExteriorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteriorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("WealthLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HomeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TownId");

                    b.ToTable("Home");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Kingdom", b =>
                {
                    b.Property<int>("KingdomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Geography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Government")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoricalEvents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landmarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourcesEconomy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Threats")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KingdomId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Kingdom");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("ExteriorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsForSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteriorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfStore")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TownId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Town", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Defenses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Geography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Government")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoricalEvents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KingdomId")
                        .HasColumnType("int");

                    b.Property<string>("Landmarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourcesEconomy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Threats")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TownId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("KingdomId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("TownTown", b =>
                {
                    b.Property<int>("AlliesTownId")
                        .HasColumnType("int");

                    b.Property<int>("RivalsTownId")
                        .HasColumnType("int");

                    b.HasKey("AlliesTownId", "RivalsTownId");

                    b.HasIndex("RivalsTownId");

                    b.ToTable("TownTown");
                });

            modelBuilder.Entity("KingdomKingdom", b =>
                {
                    b.HasOne("RPGWorldTracker.Models.Kingdom", null)
                        .WithMany()
                        .HasForeignKey("AlliesKingdomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGWorldTracker.Models.Kingdom", null)
                        .WithMany()
                        .HasForeignKey("EnemiesKingdomId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Character", b =>
                {
                    b.HasOne("RPGWorldTracker.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGWorldTracker.Models.Home", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId");

                    b.HasOne("RPGWorldTracker.Models.Store", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.Navigation("Campaign");

                    b.Navigation("Home");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Home", b =>
                {
                    b.HasOne("RPGWorldTracker.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGWorldTracker.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");

                    b.Navigation("Campaign");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Kingdom", b =>
                {
                    b.HasOne("RPGWorldTracker.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Store", b =>
                {
                    b.HasOne("RPGWorldTracker.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGWorldTracker.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");

                    b.Navigation("Campaign");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("RPGWorldTracker.Models.Town", b =>
                {
                    b.HasOne("RPGWorldTracker.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGWorldTracker.Models.Kingdom", "Kingdom")
                        .WithMany()
                        .HasForeignKey("KingdomId");

                    b.Navigation("Campaign");

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("TownTown", b =>
                {
                    b.HasOne("RPGWorldTracker.Models.Town", null)
                        .WithMany()
                        .HasForeignKey("AlliesTownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGWorldTracker.Models.Town", null)
                        .WithMany()
                        .HasForeignKey("RivalsTownId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
